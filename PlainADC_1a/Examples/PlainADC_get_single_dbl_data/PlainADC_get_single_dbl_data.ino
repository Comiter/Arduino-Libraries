/* 	Example of use of the PlainADC library for single shot data acquisition	It consists in acquiring 1 sample in a 4 bytes long vector containing one	float data and reading back this data with the ReadDbl32Data function 	Tested with ATmega328 powered Arduino boards	Copyright (C) 2012-2013 Didier Longueville	This program is free software: you can redistribute it and/or modify	it under the terms of the GNU General Public License as published by	the Free Software Foundation, either version 3 of the License, or	(at your option) any later version.	This program is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	GNU General Public License for more details.	You should have received a copy of the GNU General Public License	along with this program.  If not, see <http://www.gnu.org/licenses/>.	*/#include <PlainADC.h>/* Create objects */PlainADC PADC; /* Create ADC object *//* Acquisition parameters */const uint16_t adcChannel = 0; /* From 0 to 5 on ATmega328 powered Arduinos */const uint16_t refVoltage = ADC_REF_VOL_DEFAULT; /* VCC (5V) */const uint8_t dataFormat = ADC_DAT_FMT_INT;const uint8_t options = ADC_OPT_NONE;void setup(void){  	/* Initialize serial comm port */	Serial.begin(115200); 	/* Set data acquisition parameters */	PADC.SetAcquisitionEngine(adcChannel, refVoltage, 10000.0, 1, dataFormat, options);	/* Mark event */	Blinked(3);}void loop(void) {	/* Mark event */	Blinked(1);	/* Acquire data */	PADC.GetScanData();	/* Read data */	float data = ((PADC.ReadDbl32Data(0) * 5.0) / 1024.0);	/* Print data */	Serial.println(data, 6);	// while(1); /* Run Once */	delay(3000); /* Repeat after delay */}void Blinked(uint16_t cycles) /* Blink control led */{	/* Make the led pin an output pin */	DDRB |= (1 << PINB5);	/* Reset pin state */	PORTB &= ~(1 << PINB5); /* Turn control led off */	for (uint8_t i = 0; i < (cycles << 1); i++)	{		delay(200);		PORTB ^= (1 << PINB5);	}}