/* 	Example of use of the PlainADC library for single shot data acquisition	It consists in setting acquisition parameters for any type of data and	using the GetSingleUInt16Data function (See also GetSingleDouble32Data)	Tested with ATmega328 powered Arduino boards	Copyright (C) 2012-2013 Didier Longueville	This program is free software: you can redistribute it and/or modify	it under the terms of the GNU General Public License as published by	the Free Software Foundation, either version 3 of the License, or	(at your option) any later version.	This program is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	GNU General Public License for more details.	You should have received a copy of the GNU General Public License	along with this program.  If not, see <http://www.gnu.org/licenses/>.	*/#include <PlainADC.h>/* Create objects */PlainADC pADC; /* Create ADC object *//* Acquisition parameters */const uint16_t adcChannel = 0; /* From 0 to 5 on ATmega328 powered Arduinos */const uint16_t refVoltage = ADC_REF_VOL_DEFAULT; /* VCC (5V) */const uint8_t options = ADC_OPT_NONE;void setup(){  	/* Initialize serial comm port */	Serial.begin(115200); 	/* Set data acquisition parameters */	pADC.SetAcquisitionEngine(adcChannel, refVoltage, 1000.0, 1, ADC_DAT_FMT_INT, options);	/* Mark event */	Blinked(3);}void loop() {	/* Mark event */	Blinked(1);	/* Get data */	float data = ((pADC.GetSingleUInt16Data() * 5.0) / 1024.0);	/* Print data */	Serial.println(data, 6);	// while(1); /* Run Once */	delay(1000); /* Repeat after delay */}void Blinked(uint8_t cycles) /* Blink control led */{	/* Make the led pin an output pin */	DDRB |= (1 << PINB5);	/* Reset pin state */	PORTB &= ~(1 << PINB5); /* Turn control led off */	for (uint8_t i = 0; i < (cycles << 1); i++)	{		delay(200);		PORTB ^= (1 << PINB5);	}}